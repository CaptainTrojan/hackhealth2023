from model import CDIL, AutoEncoder, Predictor
from dataloader import ECGDataModule, HDF5ECGDataset
import argparse
import pytorch_lightning as pl
from pytorch_lightning.loggers import WandbLogger
from pytorch_lightning.callbacks import EarlyStopping
from resnet_model import ResNet
from tsai.models.TSPerceiver import TSPerceiver


def train_func(config, max_epochs, num_samples):


    if config['model'] == 'cdil':
        core = CDIL(
            input_channels=12,
            hidden_channels=config['hidden_channels'],
            output_channels=config['output_channels'],
            num_layers=config['num_layers'],
            kernel_size=config['kernel_size']
        )
    elif config['model'] == 'resnet':
        core = ResNet(normalize=True, propagate_normalization=False, embedding_size=config['output_channels'],
                      dropout=config['dropout'])
    elif config['model'] == 'tsai01':
        core = TSPerceiver(c_in=12, c_out=config['output_channels'], seq_len=4096,
                           attn_dropout=config['dropout'], fc_dropout=config['dropout'],
                           n_layers=config['num_layers'])

    model = Predictor(core, config['model'], config['output_channels'], lr=config['learning_rate'],
                      wd=config['weight_decay'], dropout=config['dropout'])

    checkpoint_callback = pl.callbacks.ModelCheckpoint(
        monitor='val_accuracy',
        dirpath='checkpoints/',
        filename=str(config['model']) + '-{epoch:02d}-hc' + str(config['hidden_channels']) + '-nl' + str(
            config['num_layers']) + '-oc' + str(config['output_channels']) + '-{val_accuracy:.2f}',
        save_top_k=1,
        mode='max',
    )
    wandb_logger = WandbLogger(project='hackhealth2023-predictor', config=config)
    early_stop_callback = EarlyStopping(
        monitor='val_accuracy',
        min_delta=0.00,
        patience=10,
        verbose=False,
        mode='max'
    )

    trainer = pl.Trainer(
        devices="auto",
        accelerator="auto",
        enable_progress_bar=True,
        max_epochs=max_epochs,
        callbacks=[checkpoint_callback, early_stop_callback],
        logger=wandb_logger,
    )
    trainer.fit(model, datamodule=dm)


if __name__ == '__main__':
    # setup argparse to load smoke test boolean flag

    # Initialize the Data Module
    dm = ECGDataModule('dataset/', batch_size=32, mode=HDF5ECGDataset.Mode.MODE_HH_TRIPLETS,
                       train_fraction=0.7, dev_fraction=0.1, test_fraction=0.2)

    # Prepare the Data Module for use (e.g., split data into train, dev, test)
    dm.setup(stage='fit')

    # Access the training data loader
    train_loader = dm.train_dataloader()

    core = ResNet(normalize=True, propagate_normalization=False, embedding_size=256)

    model = Predictor(core,'triplet_resnet',channels=512,lr= 0.001,wd= 0.001,dropout= 0.0)

    # Iterate over the training data loader
    for batch in train_loader:
        x = model(batch)
        # Here, each 'batch' is a batch of triplets generated by the `generator_triplets` function
        # You can now use this batch for training your model or other purposes
        pass  # Replace with your training code
